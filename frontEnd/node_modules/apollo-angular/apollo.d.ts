import { NgZone } from '@angular/core';
import { ApolloClient, QueryOptions, MutationOptions, ApolloQueryResult, SubscriptionOptions, ApolloClientOptions } from 'apollo-client';
import { FetchResult } from 'apollo-link';
import { Observable } from 'rxjs';
import { QueryRef } from './query-ref';
import { WatchQueryOptions, ExtraSubscriptionOptions, R, NamedOptions } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class ApolloBase<TCacheShape = any> {
    protected ngZone: NgZone;
    protected _client?: ApolloClient<TCacheShape>;
    constructor(ngZone: NgZone, _client?: ApolloClient<TCacheShape>);
    watchQuery<T, V = R>(options: WatchQueryOptions<V>): QueryRef<T, V>;
    query<T, V = R>(options: QueryOptions<V>): Observable<ApolloQueryResult<T>>;
    mutate<T, V = R>(options: MutationOptions<T, V>): Observable<FetchResult<T>>;
    subscribe<T, V = R>(options: SubscriptionOptions<V>, extra?: ExtraSubscriptionOptions): Observable<FetchResult<T>>;
    /**
     * Get an access to an instance of ApolloClient
     */
    getClient(): ApolloClient<TCacheShape>;
    /**
     * Set a new instance of ApolloClient
     * Remember to clean up the store before setting a new client.
     *
     * @param client ApolloClient instance
     */
    setClient(client: ApolloClient<TCacheShape>): void;
    private ensureClient;
    private checkInstance;
}
export declare class Apollo extends ApolloBase<any> {
    private _ngZone;
    private map;
    constructor(_ngZone: NgZone, apolloOptions?: ApolloClientOptions<any>, apolloNamedOptions?: NamedOptions);
    /**
     * Create an instance of ApolloClient
     * @param options Options required to create ApolloClient
     * @param name client's name
     */
    create<TCacheShape>(options: ApolloClientOptions<TCacheShape>, name?: string): void;
    /**
     * Use a default ApolloClient
     */
    default(): ApolloBase<any>;
    /**
     * Use a named ApolloClient
     * @param name client's name
     */
    use(name: string): ApolloBase<any>;
    /**
     * Create a default ApolloClient, same as `apollo.create(options)`
     * @param options ApolloClient's options
     */
    createDefault<TCacheShape>(options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Create a named ApolloClient, same as `apollo.create(options, name)`
     * @param name client's name
     * @param options ApolloClient's options
     */
    createNamed<TCacheShape>(name: string, options: ApolloClientOptions<TCacheShape>): void;
    /**
     * Remember to clean up the store before removing a client
     * @param name client's name
     */
    removeClient(name?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Apollo, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Apollo>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBvbGxvLmQudHMiLCJzb3VyY2VzIjpbImFwb2xsby5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBcG9sbG9DbGllbnQsIFF1ZXJ5T3B0aW9ucywgTXV0YXRpb25PcHRpb25zLCBBcG9sbG9RdWVyeVJlc3VsdCwgU3Vic2NyaXB0aW9uT3B0aW9ucywgQXBvbGxvQ2xpZW50T3B0aW9ucyB9IGZyb20gJ2Fwb2xsby1jbGllbnQnO1xuaW1wb3J0IHsgRmV0Y2hSZXN1bHQgfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBRdWVyeVJlZiB9IGZyb20gJy4vcXVlcnktcmVmJztcbmltcG9ydCB7IFdhdGNoUXVlcnlPcHRpb25zLCBFeHRyYVN1YnNjcmlwdGlvbk9wdGlvbnMsIFIsIE5hbWVkT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXBvbGxvQmFzZTxUQ2FjaGVTaGFwZSA9IGFueT4ge1xuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgX2NsaWVudD86IEFwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT47XG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUsIF9jbGllbnQ/OiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+KTtcbiAgICB3YXRjaFF1ZXJ5PFQsIFYgPSBSPihvcHRpb25zOiBXYXRjaFF1ZXJ5T3B0aW9uczxWPik6IFF1ZXJ5UmVmPFQsIFY+O1xuICAgIHF1ZXJ5PFQsIFYgPSBSPihvcHRpb25zOiBRdWVyeU9wdGlvbnM8Vj4pOiBPYnNlcnZhYmxlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PjtcbiAgICBtdXRhdGU8VCwgViA9IFI+KG9wdGlvbnM6IE11dGF0aW9uT3B0aW9uczxULCBWPik6IE9ic2VydmFibGU8RmV0Y2hSZXN1bHQ8VD4+O1xuICAgIHN1YnNjcmliZTxULCBWID0gUj4ob3B0aW9uczogU3Vic2NyaXB0aW9uT3B0aW9uczxWPiwgZXh0cmE/OiBFeHRyYVN1YnNjcmlwdGlvbk9wdGlvbnMpOiBPYnNlcnZhYmxlPEZldGNoUmVzdWx0PFQ+PjtcbiAgICAvKipcbiAgICAgKiBHZXQgYW4gYWNjZXNzIHRvIGFuIGluc3RhbmNlIG9mIEFwb2xsb0NsaWVudFxuICAgICAqL1xuICAgIGdldENsaWVudCgpOiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+O1xuICAgIC8qKlxuICAgICAqIFNldCBhIG5ldyBpbnN0YW5jZSBvZiBBcG9sbG9DbGllbnRcbiAgICAgKiBSZW1lbWJlciB0byBjbGVhbiB1cCB0aGUgc3RvcmUgYmVmb3JlIHNldHRpbmcgYSBuZXcgY2xpZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsaWVudCBBcG9sbG9DbGllbnQgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBzZXRDbGllbnQoY2xpZW50OiBBcG9sbG9DbGllbnQ8VENhY2hlU2hhcGU+KTogdm9pZDtcbiAgICBwcml2YXRlIGVuc3VyZUNsaWVudDtcbiAgICBwcml2YXRlIGNoZWNrSW5zdGFuY2U7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBcG9sbG8gZXh0ZW5kcyBBcG9sbG9CYXNlPGFueT4ge1xuICAgIHByaXZhdGUgX25nWm9uZTtcbiAgICBwcml2YXRlIG1hcDtcbiAgICBjb25zdHJ1Y3Rvcihfbmdab25lOiBOZ1pvbmUsIGFwb2xsb09wdGlvbnM/OiBBcG9sbG9DbGllbnRPcHRpb25zPGFueT4sIGFwb2xsb05hbWVkT3B0aW9ucz86IE5hbWVkT3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEFwb2xsb0NsaWVudFxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgcmVxdWlyZWQgdG8gY3JlYXRlIEFwb2xsb0NsaWVudFxuICAgICAqIEBwYXJhbSBuYW1lIGNsaWVudCdzIG5hbWVcbiAgICAgKi9cbiAgICBjcmVhdGU8VENhY2hlU2hhcGU+KG9wdGlvbnM6IEFwb2xsb0NsaWVudE9wdGlvbnM8VENhY2hlU2hhcGU+LCBuYW1lPzogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVc2UgYSBkZWZhdWx0IEFwb2xsb0NsaWVudFxuICAgICAqL1xuICAgIGRlZmF1bHQoKTogQXBvbGxvQmFzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFVzZSBhIG5hbWVkIEFwb2xsb0NsaWVudFxuICAgICAqIEBwYXJhbSBuYW1lIGNsaWVudCdzIG5hbWVcbiAgICAgKi9cbiAgICB1c2UobmFtZTogc3RyaW5nKTogQXBvbGxvQmFzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRlZmF1bHQgQXBvbGxvQ2xpZW50LCBzYW1lIGFzIGBhcG9sbG8uY3JlYXRlKG9wdGlvbnMpYFxuICAgICAqIEBwYXJhbSBvcHRpb25zIEFwb2xsb0NsaWVudCdzIG9wdGlvbnNcbiAgICAgKi9cbiAgICBjcmVhdGVEZWZhdWx0PFRDYWNoZVNoYXBlPihvcHRpb25zOiBBcG9sbG9DbGllbnRPcHRpb25zPFRDYWNoZVNoYXBlPik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmFtZWQgQXBvbGxvQ2xpZW50LCBzYW1lIGFzIGBhcG9sbG8uY3JlYXRlKG9wdGlvbnMsIG5hbWUpYFxuICAgICAqIEBwYXJhbSBuYW1lIGNsaWVudCdzIG5hbWVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBcG9sbG9DbGllbnQncyBvcHRpb25zXG4gICAgICovXG4gICAgY3JlYXRlTmFtZWQ8VENhY2hlU2hhcGU+KG5hbWU6IHN0cmluZywgb3B0aW9uczogQXBvbGxvQ2xpZW50T3B0aW9uczxUQ2FjaGVTaGFwZT4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbWVtYmVyIHRvIGNsZWFuIHVwIHRoZSBzdG9yZSBiZWZvcmUgcmVtb3ZpbmcgYSBjbGllbnRcbiAgICAgKiBAcGFyYW0gbmFtZSBjbGllbnQncyBuYW1lXG4gICAgICovXG4gICAgcmVtb3ZlQ2xpZW50KG5hbWU/OiBzdHJpbmcpOiB2b2lkO1xufVxuIl19